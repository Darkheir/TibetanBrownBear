# pylint: disable=unused-argument
"""Tests for the Malware datatype."""

import pytest

from yeti.core.errors import ValidationError
from yeti.core.entities.malware import Malware

def test_malware_creation(clean_db):
    """Tests the creation of a single malware."""
    mal = Malware(name='Gootkit')
    assert mal.id is None
    mal = mal.save()
    assert isinstance(mal, Malware)
    assert mal.id is not None

def test_malware_attributes(clean_db, populate_malware):
    """Tests that a created Malware has all needed attributes."""
    allitems = Malware.list()
    for malware in allitems:
        assert hasattr(malware, 'family')
        assert isinstance(malware.family, list)

def test_malware_fetch(clean_db):
    """Tests fetching a single malware by id."""
    mal = Malware(name='Gootkit').save()
    fetched_mal = Malware.get(mal.id)
    assert isinstance(fetched_mal, Malware)
    assert fetched_mal.id == mal.id

def test_invalid_malware_name(clean_db):
    """Tests that malware can't be created with invalid names."""
    with pytest.raises(ValidationError):
        Malware(name="123", family='asd').save()
